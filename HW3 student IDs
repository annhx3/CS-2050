/* 
 * File:   main.c
 * Author: Alyssa Nielsen - ANNHX3
 * Homework 3
 *
 * Created on July 8, 2015, 6:21 PM
 */

#include <stdio.h>
#include <stdlib.h>

#define NUM_STUDENTS 10

/*
 * Read in a binary file to struct of student id's, print sorted link list, ask user for id 
 * to search for in list - let know if found and at what index - ask for another id to be changed
 * and what to change id to, print out new list.  ask user for an id to delete, and print list with it removed
 */
//define struct

typedef struct node {
    int stuID;
    struct node* nextPtr;
} Node;
//function prototypes
Node* create_node(int stuID);
Node* add_node_in_order(Node* listHead, Node* newNode);
Node* read_node_list_file(const char* fileName);
int search(Node* listHead, int searchNum);
void change_node(Node* listHead, int stuID, int newStuId);
Node* delete_node(Node* listHead, int stuId);
void print_list(Node* listHead);
void free_list(Node* listHead);

int main(int argc, char** argv) {

    //variables
    int searchNum = 0, whichID = 0, newID = 0;
    Node* listHead;
    //input file
    const char *fileName = "input.txt";
    //list head contains Node read in from input file
    listHead = read_node_list_file(fileName);
    //print sorted list
    printf("\nREAD FROM FILE\n");
    print_list(listHead);
    //ask user for student id to search for
    printf("\nEnter a number to search for: ");
    scanf("%d", &searchNum);

    //assign index the result of the index containing the searched id
    int index = search(listHead, searchNum);
    //if found, tell user which index found at
    if (index != -1) {
        printf("Student with stuID %d found at index %d", searchNum, index);
    } else {
        //student id not in list
        printf("Student not found.");
    }

    //ask user for a student ID to update
    printf("\nPlease tell me which ID you want to update: ");
    scanf("%d", &whichID);
    //ask user what to change ID to
    printf("What do you want to change it to? ");
    scanf("%d", &newID);

    //if found, tell user which index found at
    change_node(listHead, whichID, newID);
    print_list(listHead);

    //delete a student/student id chosen by user
    int toDelete = 0;
    printf("\nPlease tell me which ID you want to delete: ");
    scanf("%d", &toDelete);
    listHead = delete_node(listHead, toDelete);
    //print new list without deleted node
    if (listHead != NULL) {
        printf("\nAfter deletion:\n");
        print_list(listHead);
    }
    //free memory allocated to nodes
    free_list(listHead);

    return (EXIT_SUCCESS);
}
//create a new node with a given student id

Node* create_node(int stuID) {
    //malloc space for new node in memory
    Node * newNode = (Node*) malloc(sizeof (Node));

    newNode->stuID = stuID;
    newNode->nextPtr = NULL;

    return newNode;
}
//add a node to the list in sorted order - sorting as added

Node* add_node_in_order(Node* listHead, Node* newNode) {
    Node* currentNode = listHead;
    Node* previous = NULL;

    //We have the check for the case where the list is empty first. 
    //We want to go to the end of the list, so we use a loop to get there.
    while (currentNode != NULL && newNode->stuID > currentNode->stuID) {
        previous = currentNode; //walk to...
        currentNode = currentNode->nextPtr; //...next node
    }
    //insert new node at beginning of list
    if (previous == NULL) {
        newNode->nextPtr = listHead;
        listHead = newNode;
    } else {
        //insert new node between previous and current pointers
        previous->nextPtr = newNode;
        newNode->nextPtr = currentNode;
    }

    return listHead;
}
//read in node information from input file

Node* read_node_list_file(const char* fileName) {
    FILE* inputFile;

    Node* newNode = NULL;
    Node tempNode;
    Node* startNode = NULL;

    int i;
    //make sure file is opened correctly
    if ((inputFile = fopen(fileName, "rb+")) == NULL) {
        printf("\nCould not open file!\n");
    }
    //loop through students to read in node info from input file one node at a time
    for (i = 0; i < NUM_STUDENTS; i++) {
        fread(&tempNode, sizeof (Node), 1, inputFile);
        newNode = create_node(tempNode.stuID);
        startNode = add_node_in_order(startNode, newNode);

    }
    return startNode;
    fclose(inputFile);
}
//search for node with user chosen number

int search(Node* listHead, int searchNum) {
    int i = 1;

    while (listHead != NULL) {
        //if found, return its index
        if (listHead->stuID == searchNum) {
            return i;
        }//otherwise walk to next pointer
        listHead = listHead->nextPtr;
        //bump index
        i++;
    }
    return -1;
}
//update a node's student id with user chosen id to update and information

void change_node(Node* listHead, int stuId, int newStuId) {
    int index = 1;
    Node* currentNode = listHead;
    //Node* temp = NULL;
    if (currentNode == NULL) {
        printf("\nStudent not found!\n");
    }
    while (currentNode != NULL) {
        //if chosen id to update found, tell user which index it was found and give it new id  
        if (currentNode->stuID == stuId) {
            currentNode->stuID = newStuId;
            printf("\nFound node to change at index %d\n", index);
            return;
        }
        //keep bumping node index and point to next node until found/or end of list and not found
        index++;
        currentNode = currentNode->nextPtr;
    }
    //if node to update not found
    printf("\nNever found a student with ID %d.\n", stuId);
    return;

}
//delete node from list

Node* delete_node(Node* listHead, int stuId) {
    Node* previousPtr;
    Node* currentPtr;
    Node* tempPtr;

    //delete first node
    if (stuId == listHead->stuID) {
        tempPtr = listHead;
        listHead = listHead->nextPtr;
        free(tempPtr);
        return listHead;
    } else {
        previousPtr = listHead;
        currentPtr = listHead->nextPtr;
        //loop to find correct location in list
        while (currentPtr != NULL && currentPtr->stuID != stuId) {
            previousPtr = currentPtr;
            currentPtr = currentPtr->nextPtr;
        }
        //delete node at current pointer
        if (currentPtr != NULL) {
            tempPtr = currentPtr;
            previousPtr->nextPtr = currentPtr->nextPtr;
            free(tempPtr);
            return listHead;
        }
    }
    //not found
    printf("Never found a node with student id %d\n", stuId);
    printf("\nAfter deletion:\n");
    print_list(listHead);
}
//print list of nodes

void print_list(Node* listHead) {
    Node* currentNode = listHead;
    int i = 1;

    while (currentNode != NULL) {
        printf("Printing student %d:\n", i);
        printf("\tStudent ID: %d\n", currentNode->stuID);
        currentNode = currentNode->nextPtr;
        i++;
    }
    return;
}
//free memory of each node

void free_list(Node* listHead) {
    //Use temp to be able to free nodes as we traverse the list.
    Node* temp;

    //set temp = listHead and see if our lists is empty...
    while ((temp = listHead) != NULL) {
        //set the head of the list to the next node...
        listHead = listHead->nextPtr;
        //and free the node we are on. 
        free(temp);
    }
    return;
}
