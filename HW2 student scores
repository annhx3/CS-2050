/* 
 * File:   main.c
 * Author: Alyssa Nielsen - ANNHX3
 * HOMEWORK 2
 *
 * Created on June 25, 2015, 9:41 PM
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>

#define NAME_SIZE 25
#define NUM_SCORES 3

/*
 * 
 */
//define struct for student name and scores
typedef struct{
    char name[NAME_SIZE];
    int scores[NUM_SCORES];
} Student;
//function prototypes defined
int read_data(Student *s, int size, const char *filename, int index);
void print_data(Student *s, int size);
void selection_sort(Student *s, int size);
int binary_search(Student *s, const char *target, int start_idx, int end_idx);
void display_stats(Student *s, int size);
int lowest_score(Student *s, int size);
int highest_score(Student *s, int size);
//void swap(int*, int*);

int main(int argc, char** argv) {
    //check that index was input in command line
    if (argc != 2){
        printf("\nInsufficient amount of arguments");
        return 0;
    }
    //initialize variables
    int size, read = 0, i = 0, j = 0;
    const char *fileName = "input.txt";
    char yn = 'y';

    //Ask user how many students to load
    printf("\nHow many students would you like to load from the input file (1-20)? ");
    scanf("%d", &size);
        //check that it is between 1-20 for grading/ease of use
        while (size < 1 || size > 20){
        printf("\nPlease enter new amount of students to load (1-20): ");
        scanf("%d", &size);
        }
    //malloc memory for students instance
    Student *students = (Student*) malloc(sizeof(Student) * size+2);
        
    /*ask user for index of student they want to view*/
    int index = atoi(argv[1]);
    //scanf("%d", &index);
    if (index < 1 || index > 100){
        //user entered invalid index
        printf("\nInvalid index, please enter a new index to load (1-100): ");
        return 0;
    }
    //check that index and size wont be more than amount in array
    while(index + size > 100){
        printf("Error with amount to be read and starting point - enter smaller amount of students: ");
        scanf("%d", &size);
    }
    //read in data from input file
    read = read_data(students, size, fileName, index);
        //make sure all requested info was loaded
        if (read < size){
        printf("\nRead error!");
        return 0;
        }
    //display unsorted selection           
    printf("\nUnsorted selection of students:");
    print_data(students, size);
    //sort selection
    selection_sort(students, size);
    puts("");
    //display sorted selection
    printf("\nSorted selection of students:");
    print_data(students, size);
    //while user wants to search from selections
    while (yn == 'y'){

        char searchname[NAME_SIZE];
        int c = 0;
        //ask user what name to search for
        printf("\n\nEnter a name to search for: ");
        //this was to fix error where it wouldnt let me use fgets with whole name
        while((c = getchar())!='\n' && c != EOF);
        scanf("%[^\n]", searchname);
        getchar();
        
        int result = 0;
        //use binary search to check for name entered by user
        result = binary_search(students, searchname, 0, size );
        if (result != -1){
            //print name searched for and which index it was found (OFFSET TO MATCH SAMPLE OUTPUT/FOR USER)
            printf("\n%s was found at index %d with test scores of: ", searchname, result + 1);
            //display student scores
            display_stats(students, result);
            }
        else if (result == -1)
        {
            //student not found
            printf("\n%s was not found.\n", searchname); 
            }
        //ask if the user wants to continue searching for names
        printf("\nContinue searching names (y/n)? :");
        scanf("%c", &yn);
    }
        //call functions to check for lowest and highest scores in selection
        lowest_score(students, size);
        highest_score(students, size);
    //free memory used by students
    free(students);
    //exit program
    return (EXIT_SUCCESS);
}
//read student data from input file
int read_data(Student *students, int size, const char *fileName, int index){
    FILE* inputFile;
    int read = 0;
    
    if ((inputFile = fopen(fileName, "rb+")) == NULL){
        printf("Could not open input file");
    }
    //move ptr to index chosen
    fseek(inputFile, (index - 1) * sizeof(Student), SEEK_SET);
    //read in student info and return amount read in
    read = fread(students, sizeof(Student), size, inputFile);
    //close input file
    fclose(inputFile);
    //return # read in
    return read;
}
//print student data
void print_data(Student *students, int size){
    int i = 0;
    
    for (i = 0; i < size; i++) {
        printf("\n\nStudent %d:", i+1);
        printf("\nName: %s", students[i].name);
        printf("\nScore 1: %d", students[i].scores[0]);
        printf("\nScore 2: %d", students[i].scores[1]);
        printf("\nScore 3: %d", students[i].scores[2]);
    }
}
//sort students by name 
void selection_sort(Student *str, int size){
    
    int i, j;
    Student temp;
    int smallest;
    
    for(i = 0;i < size - 1;i++){
            smallest = i;
      for(j = i + 1;j < size;j++){
            if(strcmp(str[j].name,str[smallest].name) < 0){
               smallest = j;
            }
      }
     temp = str[i];
     str[i] = str[smallest];
     str[smallest] = temp;
    }
 }
//search for student name from selection      
int binary_search(Student *s, const char *target, int start_idx, int end_idx){

int middle; 
middle = (start_idx + end_idx) / 2;
//start_idx = 0;
if (start_idx > end_idx){
    return -1;
}
else{ 
    if( strcmp(target, s[middle].name) == 0 ) {
    //found
    return middle;
}
else if( strcmp(target, s[middle].name) < 0 ) 
    {
        //lower than middle
        return binary_search(s,target, start_idx, middle - 1 );
    }
else if ( strcmp(target, s[middle].name) > 0 ) 
    {    
    //higher than middle
        return binary_search(s,target, middle + 1, end_idx);
    }
    else
        //error
        return -1;
}
}
//display scores of searched student if found
void display_stats(Student *students, int index){
        
        printf("\nScore 1: %d", students[index].scores[0]);
        printf("\nScore 2: %d", students[index].scores[1]);
        printf("\nScore 3: %d", students[index].scores[2]);
}
//find lowest score from selection of students
int lowest_score(Student *s, int size){
    int min = 150, index = -1, score = -1, i = 0, j = 0;
    
    for(i = 0; i < size; i ++){
        for(j = 0; j < 3; j++){
            if(min > s[i].scores[j]){
                min = s[i].scores[j];
                index = i;
                score = j;
            }
        }
    }
    //print lowest score to stdout
    printf("\nThe lowest score was %d by %s", s[index].scores[score], s[index].name);
    
    // write lowest score info into new output file
    
    //NOTE: could not put space btwn the lowest/highest score info printed into stats.txt output file
     FILE *fp;
     if((fp = fopen("stats.txt", "w")) == NULL){
         printf("File could not be opened)");
     return -1;
     }
     fprintf(fp, "\nThe lowest score was %d by %s\n", s[index].scores[score], s[index].name);
     fclose(fp);
     return 0;
}
//find highest score from selection of students    
int highest_score(Student *s, int size){
    int max = 0, index = -1, score = -1, i = 0, j = 0;
    
    for(i = 0; i < size; i ++){
        for(j = 0; j < 3; j++){
            if(max < s[i].scores[j]){
                max = s[i].scores[j];
                index = i;
                score = j;
            }
        }
    }
    //print highest score info to stdout
     printf("\nThe highest score was %d by %s", s[index].scores[score], s[index].name);
    //add highest score to output file with lowest score info
     FILE *fp;
     if((fp = fopen("stats.txt", "a")) == NULL){
         printf("File could not be opened)");
     return -1;
     }
     fprintf(fp, "\nThe highest score was %d by %s\n", s[index].scores[score], s[index].name);
     
     fclose(fp);
     return 0;
    }
    
